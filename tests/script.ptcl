unsyntax {
	prototype function printf(content: character*, ...): integer
	prototype function printn(content: integer, ...): integer
	prototype function printc(content: character, ...): integer
	prototype function strlen(content: character*): integer
	prototype function malloc(size: integer): pointer
}

syntax list_name([T: static type]) end {
	!<__list_ word(T)>
}

syntax list_object_name([T: static type]) end {
	!<__list_object_ word(T)>
}

syntax list([T: static type]) end {
	@{
		~type_name: static word = #list_name(T)
		~type_object_name: static word = #list_object_name(T)
		typedata !~type_object_name(entities: !T*, length: integer, capacity: integer)
		type !~type_name: !~type_object_name {
			function add(entity: !T): void {
				self.entities[self.length] = entity
				self.length = self.length + 1
			}

			function at(index: integer): !T {
				return self.entities[index]
			}
		}

		syntax [left: !~type_name][[index: integer]] end {
			left.at(index)
		}
	}

	!~type_name
}

syntax list([T: any]) end {
	you_forgot_about_type
}

syntax list([T: static type])([capacity: integer]) end {
	#list_object_name(T)(null, 0, capacity) :: #list_name(T)
}

syntax list([T: static type])() end {
	#list(T)(0)
}

syntax using([name: static word]=[value: any]) [body: void() static] end {
	!name := value
}

function test(): void {}

function main(): integer {
	statements: static ptcl_statement_t[] = ptcl_get_statements({
		printf("Hello, world!")
		return
	})

	each statement, statements {
		printn(statement.statement_type)
	}

	value := ptcl_defined("statements")
	value_other := ptcl_defined("other")
	return 0
}
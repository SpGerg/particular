unsyntax {
	prototype function printf(content: character*, ...): integer
	prototype function printn(content: integer, ...): integer
	prototype function printc(content: character, ...): integer
	prototype function strlen(content: character*): integer
	prototype function malloc(size: integer): pointer
}

syntax list_name([T: static type]) {
	!<__list_ word(T)>
}

syntax list_object_name([T: static type]) {
	!<__list_object_ word(T)>
}

syntax list([T: any]) {
	you_forgot_about_type
}

syntax list([T: static type]) {
	@{
		~type_name: static word = #list_name(T)
		~type_object_name: static word = #list_object_name(T)
		global typedata !~type_object_name(entities: !T*, length: integer, capacity: integer)
		global type !~type_name: !~type_object_name {
			function add(entity: !T): void {
				self.entities[self.length] = entity
				self.length = self.length + 1
			}

			function at(index: integer): !T {
				return self.entities[index]
			}
		}

		syntax [left: !~type_name][[index: integer]] {
			left.at(index)
		}
	}

	!~type_name
}

syntax list([T: static type])([capacity: integer]) {
	#list_object_name(T)(null, 0, capacity) :: #list_name(T)
}

syntax list([T: static type])() {
	#list(T)(0)
}

syntax using([name: static word]=[value: any]) [body: static (): void] {
	!name := value
}

syntax object_name [name: static word] {
	!<__object_ !name>
}

syntax object [name: static word] [{] [variables: ...] [}] with [body: static (): void] {
	~typedata_name: static word = #object_name(name)
	typedata !~typedata_name(ptcl_insert(variables))
	type !name: !~typedata_name {
		ptcl_insert(ptcl_get_statements(body))
	}
}

syntax create [name: static word]([arguments: ...]) {
	@{
		~instance := #object_name(name)(!none) :: !name
		~instance.constructor(ptcl_insert(arguments))
	}

	~instance
}

syntax delete [name: any] {
	name.destructor()
}

syntax exceptional function [name: static word]([arguments: ...]) [body: static (): void] {
	function !name(ptcl_insert(arguments)): integer {
		~new_body: static (): void = {
			syntax deref [T: static type] [value: pointer] {
				@{
					if value == null {
						return 0
					}
				}

				*(value :: !T*)
			}

			ptcl_insert(ptcl_get_statements(body))
		}

		ptcl_insert(ptcl_get_statements(~new_body))
	}
}

syntax fibonacci of [value: static integer] {
	static if value <= 0 {
		0
	}
	else {
		static if value == 1 {
			1
		}
		else {	
			(#fibonacci of (value - 2)) + (#fibonacci of (value - 1))
		}
	}
}

static function fibonacci(argument: integer): integer {
	if argument == 0 {
		return 0
	}
	else {
		if argument == 1 {
			return 1
		}
		else {
			return fibonacci(argument - 1) + fibonacci(argument - 2)
		}
	}
}

syntax let [name: static word] {
	!name := #value 2
}

syntax value {
	2 +
}

function main(): integer {
	#let asd
	value := fibonacci(21)
	return 0
}